/* tslint:disable */
/* eslint-disable */
/**
 * Quiz App API
 * Dies ist die API-Beschreibung für die Quiz-App API. Sie Bestandteil der Projektabgabe im Fach Projekt: Web-Entwicklung
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AdminUserDto
 */
export interface AdminUserDto {
    /**
     * Username
     * @type {string}
     * @memberof AdminUserDto
     */
    'username': string;
    /**
     * Passwort des Users
     * @type {string}
     * @memberof AdminUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthControllerLogin200Response
 */
export interface AuthControllerLogin200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthControllerLogin200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthControllerLogin401Response
 */
export interface AuthControllerLogin401Response {
    /**
     * 
     * @type {number}
     * @memberof AuthControllerLogin401Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthControllerLogin401Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface EditableTillDto
 */
export interface EditableTillDto {
    /**
     * Bearbeitungszeitraum
     * @type {string}
     * @memberof EditableTillDto
     */
    'editableTill': string;
}
/**
 * 
 * @export
 * @interface QuestionWithCorrectAnswerDto
 */
export interface QuestionWithCorrectAnswerDto {
    /**
     * Frage
     * @type {string}
     * @memberof QuestionWithCorrectAnswerDto
     */
    'question': string;
    /**
     * Antworten als Key-Value-Paar
     * @type {object}
     * @memberof QuestionWithCorrectAnswerDto
     */
    'answers': object;
    /**
     * ID der Frage
     * @type {number}
     * @memberof QuestionWithCorrectAnswerDto
     */
    'id': number;
    /**
     * Index der richtigen Antwort
     * @type {number}
     * @memberof QuestionWithCorrectAnswerDto
     */
    'correctAnswer': number;
}
/**
 * 
 * @export
 * @interface QuestionWithoutCorrectAnswerDto
 */
export interface QuestionWithoutCorrectAnswerDto {
    /**
     * Frage
     * @type {string}
     * @memberof QuestionWithoutCorrectAnswerDto
     */
    'question': string;
    /**
     * Antworten als Key-Value-Paar
     * @type {object}
     * @memberof QuestionWithoutCorrectAnswerDto
     */
    'answers': object;
    /**
     * ID der Frage
     * @type {number}
     * @memberof QuestionWithoutCorrectAnswerDto
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface QuizSolutionDto
 */
export interface QuizSolutionDto {
    /**
     * Antworten des Studenten
     * @type {object}
     * @memberof QuizSolutionDto
     */
    'answers': object;
}
/**
 * 
 * @export
 * @interface StudentDto
 */
export interface StudentDto {
    /**
     * Name des Studenten
     * @type {string}
     * @memberof StudentDto
     */
    'name': string;
    /**
     * E-Mail des Studenten
     * @type {string}
     * @memberof StudentDto
     */
    'email': string;
    /**
     * Eindeutige Kennung für die Quiz-Erstellung
     * @type {string}
     * @memberof StudentDto
     */
    'quizCreationId': string;
    /**
     * Eindeutige Kennung des Studenten
     * @type {string}
     * @memberof StudentDto
     */
    'id': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate a user
         * @param {AdminUserDto} adminUserDto User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (adminUserDto: AdminUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminUserDto' is not null or undefined
            assertParamExists('authControllerLogin', 'adminUserDto', adminUserDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authenticate a user
         * @param {AdminUserDto} adminUserDto User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(adminUserDto: AdminUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(adminUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Authenticate a user
         * @param {AdminUserDto} adminUserDto User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(adminUserDto: AdminUserDto, options?: any): AxiosPromise<AuthControllerLogin200Response> {
            return localVarFp.authControllerLogin(adminUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate a user
     * @param {AdminUserDto} adminUserDto User credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(adminUserDto: AdminUserDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(adminUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fügt einen Kurs hinzu und erstellt ein Verzeichnis
         * @param {string} courseName Name des Kurses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerAddCourse: async (courseName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('courseControllerAddCourse', 'courseName', courseName)
            const localVarPath = `/course/addCourse/{courseName}`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt eine Liste aller Kurse zurück
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerGetCourses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course/getCourses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt eine ZIP-Datei mit allen Studentenantworten als CSV zurück
         * @param {string} courseName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerGetStudentSolutionsAsZip: async (courseName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('courseControllerGetStudentSolutionsAsZip', 'courseName', courseName)
            const localVarPath = `/course/{courseName}/solutions`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fügt einen Kurs hinzu und erstellt ein Verzeichnis
         * @param {string} courseName Name des Kurses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerAddCourse(courseName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerAddCourse(courseName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.courseControllerAddCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gibt eine Liste aller Kurse zurück
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerGetCourses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerGetCourses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.courseControllerGetCourses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gibt eine ZIP-Datei mit allen Studentenantworten als CSV zurück
         * @param {string} courseName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseControllerGetStudentSolutionsAsZip(courseName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseControllerGetStudentSolutionsAsZip(courseName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoursesApi.courseControllerGetStudentSolutionsAsZip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * 
         * @summary Fügt einen Kurs hinzu und erstellt ein Verzeichnis
         * @param {string} courseName Name des Kurses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerAddCourse(courseName: string, options?: any): AxiosPromise<void> {
            return localVarFp.courseControllerAddCourse(courseName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gibt eine Liste aller Kurse zurück
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerGetCourses(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.courseControllerGetCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gibt eine ZIP-Datei mit allen Studentenantworten als CSV zurück
         * @param {string} courseName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseControllerGetStudentSolutionsAsZip(courseName: string, options?: any): AxiosPromise<void> {
            return localVarFp.courseControllerGetStudentSolutionsAsZip(courseName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * 
     * @summary Fügt einen Kurs hinzu und erstellt ein Verzeichnis
     * @param {string} courseName Name des Kurses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public courseControllerAddCourse(courseName: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).courseControllerAddCourse(courseName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gibt eine Liste aller Kurse zurück
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public courseControllerGetCourses(options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).courseControllerGetCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gibt eine ZIP-Datei mit allen Studentenantworten als CSV zurück
     * @param {string} courseName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public courseControllerGetStudentSolutionsAsZip(courseName: string, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).courseControllerGetStudentSolutionsAsZip(courseName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizApi - axios parameter creator
 * @export
 */
export const QuizApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fügt ein Quiz zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {Array<QuestionWithCorrectAnswerDto>} questionWithCorrectAnswerDto Array von Fragen mit richtigen Antworten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerAddQuiz: async (courseName: string, quizId: string, questionWithCorrectAnswerDto: Array<QuestionWithCorrectAnswerDto>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('quizControllerAddQuiz', 'courseName', courseName)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('quizControllerAddQuiz', 'quizId', quizId)
            // verify required parameter 'questionWithCorrectAnswerDto' is not null or undefined
            assertParamExists('quizControllerAddQuiz', 'questionWithCorrectAnswerDto', questionWithCorrectAnswerDto)
            const localVarPath = `/quiz/addQuiz/course/{courseName}/quiz/{quizId}`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionWithCorrectAnswerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fügt eine Quiz-Lösung für einen bestimmten Studenten hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} studentId 
         * @param {QuizSolutionDto} quizSolutionDto Quiz-Lösung für einen Studenten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerAddQuizSolution: async (courseName: string, quizId: string, studentId: string, quizSolutionDto: QuizSolutionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('quizControllerAddQuizSolution', 'courseName', courseName)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('quizControllerAddQuizSolution', 'quizId', quizId)
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('quizControllerAddQuizSolution', 'studentId', studentId)
            // verify required parameter 'quizSolutionDto' is not null or undefined
            assertParamExists('quizControllerAddQuizSolution', 'quizSolutionDto', quizSolutionDto)
            const localVarPath = `/quiz/addQuizSolution/course/{courseName}/quiz/{quizId}/student/{studentId}`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)))
                .replace(`{${"studentId"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizSolutionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt den aktuelle Bearbeitungszeitraum eines Quizzes zurück
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerGetEditableTill: async (courseName: string, quizId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('quizControllerGetEditableTill', 'courseName', courseName)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('quizControllerGetEditableTill', 'quizId', quizId)
            const localVarPath = `/quiz/getEditableTill/course/{courseName}/quiz/{quizId}`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt alle Fragen eines bestimmten Quizzes ohne Antworten zurück
         * @param {string} course 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerGetQuestionsWithoutAnswers: async (course: string, quizId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('quizControllerGetQuestionsWithoutAnswers', 'course', course)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('quizControllerGetQuestionsWithoutAnswers', 'quizId', quizId)
            const localVarPath = `/quiz/getQuizQuestions/course/{course}/quizId/{quizId}`
                .replace(`{${"course"}}`, encodeURIComponent(String(course)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Aktualisiert die \"editableTill\"-Eigenschaft eines Quizzes
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerUpdateEditableTill: async (courseName: string, quizId: string, timestamp: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('quizControllerUpdateEditableTill', 'courseName', courseName)
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('quizControllerUpdateEditableTill', 'quizId', quizId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('quizControllerUpdateEditableTill', 'timestamp', timestamp)
            const localVarPath = `/quiz/updateEditableTill/course/{courseName}/quiz/{quizId}/{timestamp}`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)))
                .replace(`{${"quizId"}}`, encodeURIComponent(String(quizId)))
                .replace(`{${"timestamp"}}`, encodeURIComponent(String(timestamp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizApi - functional programming interface
 * @export
 */
export const QuizApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fügt ein Quiz zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {Array<QuestionWithCorrectAnswerDto>} questionWithCorrectAnswerDto Array von Fragen mit richtigen Antworten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizControllerAddQuiz(courseName: string, quizId: string, questionWithCorrectAnswerDto: Array<QuestionWithCorrectAnswerDto>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizControllerAddQuiz(courseName, quizId, questionWithCorrectAnswerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizControllerAddQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Fügt eine Quiz-Lösung für einen bestimmten Studenten hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} studentId 
         * @param {QuizSolutionDto} quizSolutionDto Quiz-Lösung für einen Studenten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizControllerAddQuizSolution(courseName: string, quizId: string, studentId: string, quizSolutionDto: QuizSolutionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizControllerAddQuizSolution(courseName, quizId, studentId, quizSolutionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizControllerAddQuizSolution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gibt den aktuelle Bearbeitungszeitraum eines Quizzes zurück
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizControllerGetEditableTill(courseName: string, quizId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EditableTillDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizControllerGetEditableTill(courseName, quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizControllerGetEditableTill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gibt alle Fragen eines bestimmten Quizzes ohne Antworten zurück
         * @param {string} course 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizControllerGetQuestionsWithoutAnswers(course: string, quizId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionWithoutCorrectAnswerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizControllerGetQuestionsWithoutAnswers(course, quizId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizControllerGetQuestionsWithoutAnswers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Aktualisiert die \"editableTill\"-Eigenschaft eines Quizzes
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizControllerUpdateEditableTill(courseName: string, quizId: string, timestamp: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quizControllerUpdateEditableTill(courseName, quizId, timestamp, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.quizControllerUpdateEditableTill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizApi - factory interface
 * @export
 */
export const QuizApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizApiFp(configuration)
    return {
        /**
         * 
         * @summary Fügt ein Quiz zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {Array<QuestionWithCorrectAnswerDto>} questionWithCorrectAnswerDto Array von Fragen mit richtigen Antworten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerAddQuiz(courseName: string, quizId: string, questionWithCorrectAnswerDto: Array<QuestionWithCorrectAnswerDto>, options?: any): AxiosPromise<void> {
            return localVarFp.quizControllerAddQuiz(courseName, quizId, questionWithCorrectAnswerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Fügt eine Quiz-Lösung für einen bestimmten Studenten hinzu
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} studentId 
         * @param {QuizSolutionDto} quizSolutionDto Quiz-Lösung für einen Studenten
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerAddQuizSolution(courseName: string, quizId: string, studentId: string, quizSolutionDto: QuizSolutionDto, options?: any): AxiosPromise<void> {
            return localVarFp.quizControllerAddQuizSolution(courseName, quizId, studentId, quizSolutionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gibt den aktuelle Bearbeitungszeitraum eines Quizzes zurück
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerGetEditableTill(courseName: string, quizId: string, options?: any): AxiosPromise<EditableTillDto> {
            return localVarFp.quizControllerGetEditableTill(courseName, quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gibt alle Fragen eines bestimmten Quizzes ohne Antworten zurück
         * @param {string} course 
         * @param {string} quizId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerGetQuestionsWithoutAnswers(course: string, quizId: string, options?: any): AxiosPromise<Array<QuestionWithoutCorrectAnswerDto>> {
            return localVarFp.quizControllerGetQuestionsWithoutAnswers(course, quizId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Aktualisiert die \"editableTill\"-Eigenschaft eines Quizzes
         * @param {string} courseName 
         * @param {string} quizId 
         * @param {string} timestamp 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizControllerUpdateEditableTill(courseName: string, quizId: string, timestamp: string, options?: any): AxiosPromise<void> {
            return localVarFp.quizControllerUpdateEditableTill(courseName, quizId, timestamp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizApi - object-oriented interface
 * @export
 * @class QuizApi
 * @extends {BaseAPI}
 */
export class QuizApi extends BaseAPI {
    /**
     * 
     * @summary Fügt ein Quiz zu einem Kurs hinzu
     * @param {string} courseName 
     * @param {string} quizId 
     * @param {Array<QuestionWithCorrectAnswerDto>} questionWithCorrectAnswerDto Array von Fragen mit richtigen Antworten
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizControllerAddQuiz(courseName: string, quizId: string, questionWithCorrectAnswerDto: Array<QuestionWithCorrectAnswerDto>, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizControllerAddQuiz(courseName, quizId, questionWithCorrectAnswerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Fügt eine Quiz-Lösung für einen bestimmten Studenten hinzu
     * @param {string} courseName 
     * @param {string} quizId 
     * @param {string} studentId 
     * @param {QuizSolutionDto} quizSolutionDto Quiz-Lösung für einen Studenten
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizControllerAddQuizSolution(courseName: string, quizId: string, studentId: string, quizSolutionDto: QuizSolutionDto, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizControllerAddQuizSolution(courseName, quizId, studentId, quizSolutionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gibt den aktuelle Bearbeitungszeitraum eines Quizzes zurück
     * @param {string} courseName 
     * @param {string} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizControllerGetEditableTill(courseName: string, quizId: string, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizControllerGetEditableTill(courseName, quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gibt alle Fragen eines bestimmten Quizzes ohne Antworten zurück
     * @param {string} course 
     * @param {string} quizId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizControllerGetQuestionsWithoutAnswers(course: string, quizId: string, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizControllerGetQuestionsWithoutAnswers(course, quizId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Aktualisiert die \"editableTill\"-Eigenschaft eines Quizzes
     * @param {string} courseName 
     * @param {string} quizId 
     * @param {string} timestamp 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public quizControllerUpdateEditableTill(courseName: string, quizId: string, timestamp: string, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).quizControllerUpdateEditableTill(courseName, quizId, timestamp, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fügt Studenten aus einer CSV-Datei zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerAddStudentsAsCsv: async (courseName: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseName' is not null or undefined
            assertParamExists('studentControllerAddStudentsAsCsv', 'courseName', courseName)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('studentControllerAddStudentsAsCsv', 'file', file)
            const localVarPath = `/student/{courseName}/addStudentsAsCsv`
                .replace(`{${"courseName"}}`, encodeURIComponent(String(courseName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gibt alle Studierenden eines bestimmten Kurses zurück
         * @param {string} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudentsByCourse: async (course: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'course' is not null or undefined
            assertParamExists('studentControllerGetStudentsByCourse', 'course', course)
            const localVarPath = `/student/getStudentsByCourse/{course}`
                .replace(`{${"course"}}`, encodeURIComponent(String(course)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fügt Studenten aus einer CSV-Datei zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerAddStudentsAsCsv(courseName: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentControllerAddStudentsAsCsv(courseName, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.studentControllerAddStudentsAsCsv']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gibt alle Studierenden eines bestimmten Kurses zurück
         * @param {string} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studentControllerGetStudentsByCourse(course: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StudentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studentControllerGetStudentsByCourse(course, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StudentApi.studentControllerGetStudentsByCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @summary Fügt Studenten aus einer CSV-Datei zu einem Kurs hinzu
         * @param {string} courseName 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerAddStudentsAsCsv(courseName: string, file: File, options?: any): AxiosPromise<void> {
            return localVarFp.studentControllerAddStudentsAsCsv(courseName, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gibt alle Studierenden eines bestimmten Kurses zurück
         * @param {string} course 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studentControllerGetStudentsByCourse(course: string, options?: any): AxiosPromise<Array<StudentDto>> {
            return localVarFp.studentControllerGetStudentsByCourse(course, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @summary Fügt Studenten aus einer CSV-Datei zu einem Kurs hinzu
     * @param {string} courseName 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public studentControllerAddStudentsAsCsv(courseName: string, file: File, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).studentControllerAddStudentsAsCsv(courseName, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gibt alle Studierenden eines bestimmten Kurses zurück
     * @param {string} course 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public studentControllerGetStudentsByCourse(course: string, options?: RawAxiosRequestConfig) {
        return StudentApiFp(this.configuration).studentControllerGetStudentsByCourse(course, options).then((request) => request(this.axios, this.basePath));
    }
}



